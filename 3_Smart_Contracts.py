# STEP 3

#Contrato Inteligente

'''
Se voc√™ quiser codificar junto, poder√° encontrar o c√≥digo de pr√©-requisito nas partes um e dois da s√©rie.
O que √© um Contrato Inteligente?
Um contrato inteligente √© um programa executado na blockchain Ethereum. Seu c√≥digo e dados residem em um endere√ßo espec√≠fico na blockchain Ethereum.
Os NFTs s√£o alimentados por contratos inteligentes que lidam com a transferibilidade e verificam a propriedade.
Voc√™ usar√° o padr√£o ERC-721 . Este √© um padr√£o NFT que fornece funcionalidades para contratos inteligentes.
'''

#Configura√ß√£o do ambiente "Alchemy"

'''
Crie uma conta na https://www.alchemy.com/ .
Alchemy √© uma plataforma de desenvolvedor de blockchain focada em facilitar o desenvolvimento do Ethereum. 
Isso nos permite pular muito da programa√ß√£o t√©cnica dif√≠cil do blockchain.
Ap√≥s a cria√ß√£o da sua conta, clique em ‚ÄúCriar App‚Äù e preencha os seguintes par√¢metros:

OBS, ao criar a conta no site a unica op√ß√£o ser√° ETHEREUM, basta seguir com essa e depois definir as op√ß√µes abaixo para o APP dentro do site

Name: Name of your NFT project
Environment: Staging
Chain: Polygon
Network: Ropsten(gratis, mas esta inativada), ou Polygon (com taxas de gas, porem bem amis baixas que o ethereum), neste caso
aconselho colocar a Polygon, e depois, selecionar a categoria Polygon Mumbai que √© um ambiente de teste, n√£o esquecer de conectar
nessa rede no metamask para facilitar pode usar o link abaixo:
https://chainlist.org/ (obs: habilitar o bot√£o TESTNETS no site)

adicionar matics fakes(criptomoedas fakes para testes de transa√ß√µes na blockchain):
https://faucet.polygon.technology/ - obs: n√£o esquecer de selecionar a rede de teste mumbai criada acima antes de copiar o link da carteira



A fim de testes usar a Polygon Mumbai

Depois desses passos acima, verifica na sua carteira Metamask se est√° com o dinheiro FAKE

provavelmente que fique 02 ou 04 na frente do nome da moeda configurada no metamask

'''

#Cria√ß√£o do projeto

'''
Crie um diret√≥rio onde voc√™ salvar√° todos os seus arquivos de projeto.
Abra seu prompt de comando digitando ‚Äúcmd‚Äù na pesquisa do Windows
Mude para o diret√≥rio onde voc√™ deseja criar sua pasta de projeto usando o comando ‚Äúcd‚Äù.
Escreva na linha de comando:

cd C:\SEUDIRET√ìRIO

Crie a pasta do projeto NFT e mude para esse diret√≥rio.
Escreva na linha de comando:


mkdir nft 
cd nft



Dentro da pasta do projeto, voc√™ inicializa o npm.
Se voc√™ n√£o instalou o NPM: baixe o Node.js (https://nodejs.org/en/)

Escreva na linha de comando dentro da pasta do node que baixou:

npm init
Pressione enter e responda como eu fiz abaixo:

Na linha de comando:

Nome do pacote: (nft-creator)
2vers√£o: (1.0.0)
3descri√ß√£o: Meu primeiro NFT!
4ponto de entrada: (index.js)
5comando de teste:
reposit√≥rio 6git:
7 palavras-chave:
8 autor:
9licen√ßa: (ISC)
10Para gravar em /Users/thesuperb1/Desktop/my-nft/package.json:
11
12{
13 "nome": "criador nft",
14 "vers√£o": "1.0.0",
15 "descri√ß√£o": "Meu primeiro NFT!",
16 "principal": "index.js",
17 "roteiros": {
18 "test": "echo \"Erro: nenhum teste especificado\" && exit 1"
19},
20 "autor": "",
21 "licen√ßa": "ISC"
22}

'''

#Instalar capacete
'''
Capacete de seguran√ßa
O ambiente de desenvolvimento do Hardhat ajuda na cria√ß√£o de contratos inteligentes localmente antes de implant√°-los na cadeia ativa. Para mais informa√ß√µes sobre o Hardhat, voc√™ pode visitar o site deles .

Execute na linha de comando:

npm install --save-dev hardhat
npx hardhat

O comando npx hardhat cria um projeto de hardhat.

Quando perguntado: ‚ÄúO que voc√™ quer fazer?‚Äù, responda ‚Äúcrie um hardhat.config.js vazio‚Äù

888    888                      888 888               888 888    888                      
888 888               888 888    888                      888 888               888 8888888888  8888b.  888d888 .
d88888 88888b.   8888b.  888888 888    888     "88b 888P"  d88" 888 888 "88b     "88b 888 888    888 .d888888 888    
888  888 888  888 .d888888 888 888    888 888  888 888    Y88b 888 888  888 888  888 Y88b. 888    888 "Y888888 888     
"Y88888 888  888 "Y888888  "Y888 
üë∑ Welcome to Hardhat v2.0.11 üë∑‚Äç 
? What do you want to do? ‚Ä¶ 
Create a sample project 
‚ùØ Create an empty hardhat.config.js 
Quit

'''

#Organize o projeto

'''
Voc√™ cria duas pastas:

Contracts: Localiza√ß√£o do seu c√≥digo de contrato inteligente NFT
Scripts: Local para os scripts implantarem e interagirem com seus contratos inteligentes
Execute o seguinte na linha de comando (certifique-se de estar no diret√≥rio raiz NFT):

mkdir contracts
mkdir scripts

'''

#Escreva seu contrato inteligente

'''
Finalmente, a configura√ß√£o est√° feita!
Vamos entrar na parte de codifica√ß√£o. Eu uso o VSCode como meu editor preferido.
Nesta parte, voc√™ escrever√° contratos inteligentes no Solidity.
Solidity √© uma linguagem de alto n√≠vel orientada a objetos especificamente para implementar contratos inteligentes.
Execute o seguinte na linha de comando:

npm install @openzeppelin/contracts

Isso instalar√° a openzeppelin biblioteca em nossa pasta. Voc√™ precisa dessas aulas mais tarde.
No seu editor (por exemplo, VScode):
Navegue at√© a contracts pasta e crie um novo arquivo MyNFT.sol
Copie o seguinte c√≥digo no arquivo:

//Contract based on [https://docs.openzeppelin.com/contracts/3.x/erc721](https://docs.openzeppelin.com/contracts/3.x/erc721)
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";

contract MyNFT is ERC721URIStorage, Ownable {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;

    constructor() public ERC721("MyNFT", "NFT") {}

    function mintNFT(address recipient, string memory tokenURI)
        public onlyOwner
        returns (uint256)
    {
        _tokenIds.increment();

        uint256 newItemId = _tokenIds.current();
        _mint(recipient, newItemId);
        _setTokenURI(newItemId, tokenURI);

        return newItemId;
    }
}


Um homem s√°bio me disse uma vez que voc√™ n√£o precisa reinventar a roda.
Portanto, no topo de nosso contrato inteligente, voc√™ est√° importando tr√™s classes de contrato inteligente OpenZeppelin .

@openzeppelin/contracts/token/ERC721/ERC721.sol


A declara√ß√£o de importa√ß√£o acima cont√©m a implementa√ß√£o do padr√£o ERC-721. Ao importar esta declara√ß√£o, nosso contrato 
inteligente herda todos os m√©todos do padr√£o ERC-721. Mais informa√ß√µes aqui .

@openzeppelin/contracts/utils/Counters.sol


A declara√ß√£o de importa√ß√£o acima √© necess√°ria, pois seu contrato inteligente precisa de um contador para acompanhar o 
n√∫mero total de NFTs cunhadas e atribuir o ID exclusivo em nossa nova NFT.

@openzeppelin/contracts/access/Ownable.sol


Para permitir que apenas o propriet√°rio do contrato inteligente crie NFTs, importamos o arquivo Ownable.sol. 
Isso √© feito usando o controle de acesso . Se voc√™ quiser que algu√©m possa cunhar um NFT usando seu contrato inteligente, 
remova a palavra Ownablena linha 10 e onlyOwnerna linha 17.)

constructor() public ERC721 ("MyNFT" , "NFT)


Em nosso construtor ERC-721, voc√™ notar√° que passamos 2 strings NFTCreatore NFTC. A primeira vari√°vel √© o nome do contrato 
inteligente e a segunda √© seu s√≠mbolo. Sinta-se √† vontade para alterar isso para qualquer que seja sua prefer√™ncia!

mintNFT(endere√ßo do destinat√°rio, string de mem√≥ria uri)

A fun√ß√£o acima permite cunhar um NFT. Duas vari√°veis ‚Äã‚Äãs√£o usadas como entrada:

address recipient: O endere√ßo para onde o NFT deve ser enviado
string memory tokenURI: o URI (identificador uniforme de recursos) dos metadados NFT. Por favor, leia a parte 2 da s√©rie para criar os metadados.
'''

#Conecte Metamask, Alquimia e seu Projeto

'''
Voc√™ deseja criar um arquivo de ambiente onde possa armazenar com seguran√ßa sua chave de API Alchemy e sua chave privada Metamask.
Isso √© necess√°rio para poder interligar os dois com o seu projeto.

Instale o pacote dotenv no diret√≥rio do seu projeto. Este pacote permite carregar vari√°veis ‚Äã‚Äã de ambiente do .envarquivo.
Execute os seguintes comandos na linha de comando:

npm install dotenv --save

Crie um arquivo .env chamado ‚Äú.env‚Äù no diret√≥rio raiz e adicione o seguinte:

Chave privada de metam√°scara (SITE COM PASSO A PASSO PARA EXPORTAR CHAVE NO METAMASK: https://metamask.zendesk.com/hc/en-us/articles/360015289632-How-to-Export-an-Account-Private-Key)
URL da API HTTP Alchemy (Assim que acessar o site com o app configurado, selecionar e clicar no bot√£o view key)

Seu arquivo .env deve ficar assim:

ex:
API_URL = "https://eth-ropsten.alchemyapi.io/v2/your-api-key"
PRIVATE_KEY = "your-metamask-private-key"



Este √© o exemplo da estrutura do seu projeto:

Exemplo da estrutura do seu projeto:
artifacts
cache
contracts
node_modules
scripts
.env
hardhat.config.js
package.json
package-lock.json

'''

#Instalar Ether.js

'''
Voc√™ aproveita a biblioteca Ether.js para implanta√ß√£o de contrato.
Escreva na linha de comando:

npm install --save-dev @nomiclabs/hardhat-ethers "ethers@^5.0.0"

'''

#Atualizar capacete
'''
Muitas depend√™ncias foram atualizadas, o que exige que nosso hardhat.config.js seja atualizado de acordo.

/**
* @type import('hardhat/config').HardhatUserConfig
*/
require('dotenv').config();
require("@nomiclabs/hardhat-ethers");
const { API_URL, PRIVATE_KEY } = process.env;
module.exports = {
   solidity: "0.8.1",
   defaultNetwork: "mumbai",
   networks: {
      hardhat: {},
      mumbai: { 
         url: API_URL,
         accounts: [`0x${PRIVATE_KEY}`]
      }
   },
}

'''

#Compilar nosso contrato
'''
Voc√™ compila o contrato chamando a tarefa ‚Äúcompile‚Äù.
Escreva na linha de comando:

npx hardhat compile

'''

#Escrever script de implanta√ß√£o
'''
Navegue at√© a pasta de scripts e crie um arquivo chamado ‚Äúdeploy.js.
Por favor, d√™ uma olhada aqui(https://hardhat.org/tutorial/testing-contracts#writing-tests) se voc√™ quiser mais detalhes sobre o que √© feito exatamente.

async function main() {
  const MyNFT = await ethers.getContractFactory("MyNFT")

  // Start deployment, returning a promise that resolves to a contract object
  const myNFT = await MyNFT.deploy()
  console.log("Contract deployed to address:", myNFT.address)
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error)
    process.exit(1)
  })
  
Detalhamento dos conceitos mais importantes em deploy.js:

const MyNFT = await ethers.getContractFactory("MyNFT")

O ContractFactoryin ethers.js√© uma abstra√ß√£o usada para implantar novos contratos inteligentes, ent√£o MyNFTaqui est√° uma 
f√°brica para inst√¢ncias do nosso contrato NFT. Ao usar o plug-in hardhat-ethers ContractFactorye Contractas inst√¢ncias s√£o 
conectadas ao primeiro signat√°rio por padr√£o.

const myNFT = await MyNFT.deploy()


Chamar deploy()a ContractFactoryiniciar√° a implanta√ß√£o e retornar√° a Promiseque resolve para um arquivo Contract. 
Este √© o objeto que possui um m√©todo para cada uma de nossas fun√ß√µes de contrato inteligente.

'''

# Vamos implantar nosso contrato inteligente!
'''
Execute o seguinte na linha de comando (certifique-se de estar em seu diret√≥rio raiz):

npx hardhat run scripts/deploy.js --network ropsten



Voc√™ deve ver o seguinte resultado, mas com um endere√ßo diferente:

Contract deployed to address: 0x81c587EB0fE773404c473DFQDCQ1327C470eED



Voc√™ pode ver seu contrato implantado usando o Ropsten etherscan (OU POLYGON MUMBI SCAN) .

A transa√ß√£o ficar√° mais ou menos assim:

No Fromcampo, voc√™ ver√° o endere√ßo da sua conta MetaMask.

No Toendere√ßo estar√° escrito ‚ÄúCria√ß√£o de Contrato‚Äù.

Voc√™ pode clicar no ‚ÄúTxn Hash‚Äù para obter mais detalhes da transa√ß√£o



O contrato j√° est√° implantado.

No pr√≥ximo artigo, voc√™ aprender√° como cunhar seus NFTs usando o contrato inteligente implantado.
'''